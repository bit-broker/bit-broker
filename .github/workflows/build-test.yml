name: Build and test
on:
  pull_request:
    paths-ignore:
      - '**.md'
  workflow_dispatch:

jobs:
   
  build-test:
    runs-on: ubuntu-latest
    steps:
       
      - name: checkout
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: 16.x

      # get & persist host IP
      - name: get host IP (eth0)
        run: echo "host_ip=$(ip addr show eth0 | grep -Po 'inet \K[\d.]+')" >> $GITHUB_ENV

      #update etc/hosts to resolve service names
      - name: Add hosts to /etc/hosts
        run: |
          echo "${{ env.host_ip }}  bbk-coordinator" | sudo tee -a /etc/hosts
          echo "${{ env.host_ip }}	bbk-contributor" | sudo tee -a /etc/hosts
          echo "${{ env.host_ip }}	bbk-consumer" | sudo tee -a /etc/hosts
          echo "${{ env.host_ip }}	bbk-database" | sudo tee -a /etc/hosts
          echo "${{ env.host_ip }}	bbk-policy-cache" | sudo tee -a /etc/hosts
          echo "${{ env.host_ip }}	bbk-auth-service" | sudo tee -a /etc/hosts
          echo "${{ env.host_ip }}	bbk-rate-limit" | sudo tee -a /etc/hosts
          echo "${{ env.host_ip }}	bbk-webhook" | sudo tee -a /etc/hosts

      # set up env files required for deployment & test...
      - name: Create .env file for docker
        run: cp .env.example .env

      - name: Create .env file for tests
        run: cp .env.example ./tests/.env

      # install test suite dependencies
      - name: install dependencies
        working-directory: tests 
        run: npm install

      # install test suite dependencies
      - name: install mocha
        working-directory: tests 
        run: npm install mocha -g
       
      - name: build and run docker-compose
        working-directory: development/docker-compose
        run: docker-compose up --build -d

      - name: run tests
        working-directory: tests 
        run: |
          mocha coordinator.js

      - name: Log containers
        if: always()
        working-directory: development/docker-compose
        run: docker-compose logs

      - name: Stop containers
        if: always()
        working-directory: development/docker-compose
        run: docker-compose down